1. Basic information
Team number (e.g., 01) : 13
#1 Student ID : 56323792
#1 Student Name : Jun Zhang
#2 Student ID : 20282757
#2 Student Name : Yuhan Zheng
OS (bit) : Ubuntu 16.04 (64-bit)
gcc version : 4.8.5


2. Catalog information about Index
- Show your catalog information about an index (tables, columns). 
Maintain a catalog file named with "Indices", below are the schema for three catalog files"
Tables (table-id:int, table-name:varchar(50), file-name:varchar(50), system-flag:int)
Columns(table-id:int, column-name:varchar(50), column-type:int, column-length:int, column-position:int, system-flag:int)
Indices(index-name: varchar(50), attribute-name: varchar(50), table-name: varchar(50), system-flag:int)


3. Block Nested Loop Join (If you have implemented this feature)
- Describe how your block nested loop join works (especially, how you manage the given buffers.)
1) Read one block of tuples from the left relation to the given buffer, and meanwhile, create an 
   std::unordered_map which maps each join attribute value to the offsets of tuples in the buffer.
2) Scan the right relation, and join each right tuple with left tuples in the buffer, and return 
   the join result one at a time.
3) After scanning all the tuples of the right relation, repeat 1) and 2) until all the tuples from 
   the left relation are processed;


4. Index Nested Loop Join (If you have implemented this feature)
- Describe how your index nested loop join works.
1) Read one tuple from the left relation.
2) Use IndexScan to retrieve the tuples from the right relation which satisfy the join condition.
3) Join the left tuple with right tuples.
4) Repeat 1) ~ 3) until all the left tuples are processed.


5. Grace Hash Join (If you have implemented this feature)
- Describe how your grace hash join works (especially, in-memory structure).
1) Partition the left and the right relation, and write each partition into a separate rile.
2) Read one partition of the left relation into a buffer, and create an std::unordered_map for the partition.
3) Read tuples from the corresponding partition of the right relation, and join them with the left tuples 
   in the buffer.
4) Repeat 2) and 3) until all the partitions are processed.


6. Aggregation
- Describe how your aggregation (basic, group-based hash) works.
1) For basic aggregation, maintain a struct including all running information while performing a scan using the input iterator. 
   Get the final aggregation value according to the aggregate operation and then return data using required format. In addition, 
   the attribute name should be modified when calling getAttributes.

2) For group-based aggregation. Maintain a hash map whose key is group value and the value is the running information, 
   perform one scan and update the map in the mean time. Then for each getNextTuple, pop one pair from the hash map and 
   get the value to be returned.


7. Implementation Detail
- Have you added your own source file (.cc or .h)?
No.

- Have you implemented any optional features? Then, describe them here.
Grace hash join and group-based aggregation.
See section 5 and section 6 for details.
