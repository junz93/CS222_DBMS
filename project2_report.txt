1. Basic information
Team number (e.g., 01) : 13
#1 Student ID : 56323792
#1 Student Name : Jun Zhang
#2 Student ID : 20282757
#2 Student Name : Yuhan Zheng
OS (bit) : Ubuntu 16.04 (64-bit)
gcc version : 5.4.0


2. Meta-data
// TODO: Complete this section
- Show your meta-data design (Tables and Columns table) and information about each column.


3. Internal Record Format
The first 2 bytes store the number of fields in this record.
The following ceil(numOfFields / 8) bytes store null indicators for all the fields.
The following 2*numOfFields bytes store the end offsets of all the fields.
The following space stores the actual field data.

O(1) field access:
We can get the end offset of any field in O(1) time, because we have random access to it. In order to access field i,
we get the end offset of field i-1 as the begin offset of field i. The length of field i is the difference between
its end offset and begin offset. Since we can get the begin offset and length of field i in O(1) time, the access time
is also O(1).

Storage of Varchar field:
The data of a varchar field is stored the same as other field types. The begin offset of a varchar field is the end offset
of its previous neighbor, and the length can be calculated as the difference between the end offset and the begin offset
of the varchar field.

Update operation:
1) If the updated record can fit into the original page, we update it in place, and shift all the records after it to keep
the free space in the middle part of the page.
2) Otherwise, we move the updated record to another page with enough free space, and replace the original record with a
pointer to the updated one. The pointer consists of two parts: page number (4 bytes) and slot number (2 bytes).

Delete operation:
When deleting a record, we shift all the records after it to left to keep the free space in the middle part of the page.


4. Page Format
The first part of a page stores the records.
The second part of a page is the free space that can be used to insert new records.
The third (last) part of a page stores the slot directory.
The last 2 bytes of the slot directory store the size of free space in this page.
The second last 2 bytes of the slot directory store the number of slots in this page.
The remainder of the slot directory stores the offset (2 bytes) and length (2 bytes) of each records in this page

Update operation:
1) If the updated record can fit into the original page, we update the slot length and free space in the slot directory.
2) Otherwise, after moving the updated record to another page, we allocate a slot and set offset and length in slot
   directory of that page.
   Besides, in the original page, we also update the slot length, and add PAGE_SIZE (4096) to the original slot offset
   to indicate that the slot now stores a pointer to the actual record (not a record).
   Lastly, we update the free space of the original page and the new page.

Delete operation:
We set the slot length to 0 in the slot directory to indicate that this record is deleted, and update the free space.


5. File Format
The first page is a header page containing a file signature (1 byte) and three counters (2 bytes for each) for read, write
and append operations respectively.
Any other page is either a directory page or a data page.

A directory page stores the size of free space of some data pages. The last 4 bytes stores the page number of the next
directory page.

A data page stores the record data.


6. Implementation Detail
RBFM_ScanIterator:
In the RBFM_ScanIterator class, we cache the current page data, and keep track of the current page number, the current
slot number, and total number of slots in the current page. Each time getNextRecord function is called, we keep scanning
the current page from the last position, and looking for the record that satisfies the given condition. If we reach the
end of the current page, we read the next page from disk and scan it.

// TODO: add some details about RelationManager to this section
